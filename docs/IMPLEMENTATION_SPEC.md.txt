# Technická Specifikace pro Implementaci: Nomad 2.0

Tento dokument slouží jako technická specifikace a záložní plán pro implementaci klíčových funkcí agenta "Nomad". Cílem je vytvořit stabilní, robustní a inteligentní jádro, které bude sloužit jako základ pro další rozvoj.

## 1. Architektura a Cíle

Hlavním cílem je odstranit současnou nestabilitu a nahradit ji předvídatelným a logickým chováním. Toho dosáhneme implementací následujících klíčových komponent:

-   **Triage Logic:** Agent musí správně klasifikovat vstup od uživatele a reagovat adekvátně.
-   **Stavový Stroj:** Striktní oddělení fází `PLANNING` a `EXECUTING` je nutností.
-   **Správa Sezení:** Agent si musí pamatovat kontext v rámci jedné konverzace.
-   **Robustní Testování:** Mockovací systém musí umožnit testování různých scénářů.
-   **Integrace Jules API:** Agent se musí naučit delegovat práci na specializované služby.

## 2. Detailní Kroky Implementace

### Krok 1: Oprava Správy Sezení a Triage Logic

**Soubory k úpravě:** `core/orchestrator.py`

1.  **Úprava hlavní smyčky `run`:**
    -   Odstranit podmínku `if not self.history`. Logika pro klasifikaci požadavku (`_triage_user_request`) se musí spouštět **při každém novém vstupu od uživatele**.
    -   Historie se bude předávat do `_triage_user_request`, aby LLM mohl lépe posoudit, zda je nový vstup pokračováním předchozího úkolu, nebo zcela novým dotazem.

2.  **Implementace větví podle typu úkolu:**
    -   **`SIMPLE_QUERY`**: Metoda `_handle_simple_query` bude volána. Tato metoda musí zajistit, že odpověď se správně zobrazí v TUI (viz bod 4). Po jejím dokončení se hlavní smyčka `run` **ukončí** a agent čeká na další vstup.
    -   **`DIRECT_COMMAND`**: Bude implementována nová metoda `_handle_direct_command`. Ta provede jeden cyklus (myšlenka -> volání nástroje -> výsledek) a poté se smyčka `run` **ukončí**.
    -   **`COMPLEX_TASK`**: Stav se přepne na `PLANNING`. Hlavní smyčka `run` pokračuje v iteracích, dokud není úkol dokončen nebo přerušen.

### Krok 2: Robustní Mockovací Systém

**Nové soubory:** `tests/mocks.py`
**Soubory k úpravě:** `tests/test_orchestrator.py`

1.  **Vytvoření `MockLLM` v `tests/mocks.py`:**
    -   Třída bude mít metodu `configure_responses(response_map)`, kde `response_map` bude slovník. Klíč bude část textu z promptu a hodnota bude předpřipravená odpověď.
    -   Metoda `generate_content_async` bude prohledávat `response_map` a vracet odpovídající odpověď, pokud najde shodu. To umožní simulovat různé reakce LLM.

2.  **Integrace do testů:**
    -   Testy v `test_orchestrator.py` budou upraveny tak, aby místo skutečného `LLMManager` používaly instanci `MockLLM`.
    -   Budou vytvořeny nové testy, které specificky ověří, že orchestrátor správně reaguje na různé typy úkolů vrácené mockem (`SIMPLE_QUERY` vs. `COMPLEX_TASK`).

### Krok 3: Příprava na Integraci Jules API

**Nové soubory:** `mcp_servers/jules_api_server.py`
**Soubory k úpravě:** `core/orchestrator.py`, `prompts/system_prompt.txt`

1.  **Vytvoření `jules_api_server.py`:**
    -   Tento nový server bude obsahovat nástroj `get_jules_api_capabilities()`.
    -   Funkce vrátí statický JSON objekt popisující dostupné "endpointy" API, např.:
        ```json
        {
          "can_write_code": true,
          "can_run_tests": true,
          "can_create_pr": true
        }
        ```

2.  **Registrace nových "delegačních" nástrojů:**
    -   V `mcp_servers/evolution_server.py` (nebo v novém dedikovaném serveru) budou vytvořeny nové nástroje, např.:
        -   `delegate_coding_to_jules(specification: str)`
        -   `delegate_testing_to_jules(test_description: str)`
    -   Tyto nástroje prozatím budou pouze vracet mockované potvrzení, např. "Úkol delegován na Jules API."

3.  **Aktualizace systémového promptu:**
    -   Do `system_prompt.txt` bude přidána instrukce, aby agent preferoval delegování komplexních úkolů na Jules API, pokud je to možné.

### Krok 4: Oprava a sjednocení zobrazení v TUI

**Soubory k úpravě:** `tui/app.py`, `core/orchestrator.py`, `core/rich_printer.py`

1.  **Obnova `explanation_widget`:**
    -   V `tui/app.py` bude plně obnoven dedikovaný `Static` widget pro myšlenkový pochod, včetně jeho kontejneru `VerticalScroll`.
2.  **Sjednocení posílání zpráv:**
    -   Všechny výstupy z `orchestrator.py` určené pro uživatele (myšlenky, odpovědi, chyby, výsledky nástrojů) budou posílány přes `RichPrinter._post(ChatMessage(...))` s jasně definovaným `msg_type`.
    -   Metoda `on_chat_message` v `tui/app.py` bude finálně opravena, aby spolehlivě zobrazovala každý typ zprávy ve správném widgetu.

Tento dokument bude sloužit jako vodítko pro úspěšné dokončení stabilizace agenta Nomad.