import sys
import os
import asyncio
import textwrap
import traceback

# P≈ôid√°n√≠ cesty k projektu, aby bylo mo≈æn√© importovat moduly z `core`
sys.path.append(os.path.join(os.path.dirname(__file__), ".."))

from textual import work
from textual.app import App, ComposeResult
from textual.containers import VerticalScroll
from textual.widgets import Header, Footer, Input, TabbedContent, TabPane, RichLog, Static
from rich.panel import Panel
from rich.syntax import Syntax
from rich.markdown import Markdown

from core.nomad_orchestrator_v2 import NomadOrchestratorV2
from core.state_manager import State
from core.rich_printer import RichPrinter
from tui.widgets.status_widget import StatusWidget
from tui.messages import LogMessage, ChatMessage

CRASH_LOG_PATH = os.path.join(os.path.dirname(__file__), "..", "logs", "crash.log")

class SophiaTUI(App):
    """Modern√≠ TUI pro interakci s NomadOrchestratorV2."""

    TITLE = "Nomad - AI Software Engineer"
    SUB_TITLE = "Powered by Sophia/Nomad V2 Protocol"

    BINDINGS = [
        ("ctrl+d", "toggle_dark", "P≈ôepnout tmav√Ω re≈æim"),
        ("ctrl+q", "request_quit", "Ukonƒçit"),
    ]

    def __init__(self):
        super().__init__()
        self.project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
        self.explanation_widget = Static(id="explanation", markup=True)
        self.current_explanation = ""
        self.tool_widget = RichLog(id="tool_output", highlight=True, markup=True)
        self.tool_widget.border_title = "V√Ωstup n√°stroj≈Ø"
        self.log_widget = StatusWidget(id="log_view")
        self.log_widget.border_title = "Syst√©mov√© logy"
        self.orchestrator = NomadOrchestratorV2(project_root=self.project_root)
        self.input_widget = Input(placeholder="Zadejte sv≈Øj √∫kol nebo zpr√°vu...")
        self.mission_running = False

    def compose(self) -> ComposeResult:
        """Sestav√≠ layout TUI."""
        yield Header()
        with TabbedContent(initial="agent_tab"):
            with TabPane("Agent", id="agent_tab"):
                with VerticalScroll(id="explanation-container"):
                    yield self.explanation_widget
                yield self.tool_widget
            with TabPane("Logy", id="log_tab"):
                yield self.log_widget
        yield self.input_widget
        yield Footer()

    async def on_mount(self) -> None:
        """Spust√≠ se po p≈ôipojen√≠ widget≈Ø a zkontroluje p√°d aplikace."""
        RichPrinter.set_message_poster(self.post_message)
        await self.initialize_orchestrator()
        self.input_widget.focus()
        # Note: Crash recovery je nyn√≠ handled v NomadOrchestratorV2 RecoveryManager

    async def initialize_orchestrator(self):
        """Inicializuje orchestr√°tor asynchronnƒõ."""
        RichPrinter.info("Inicializace NomadOrchestratorV2...")
        try:
            await self.orchestrator.initialize()
            RichPrinter.info("‚úÖ Nomad p≈ôipraven k pou≈æit√≠!")
            RichPrinter.info(f"üìä Model: {self.orchestrator.llm_manager._gemini_adapter.model_name if self.orchestrator.llm_manager._gemini_adapter else 'OpenRouter'}")
        except Exception as e:
            RichPrinter.error(f"‚ùå Chyba p≈ôi inicializaci: {e}")
            traceback.print_exc()
    
    async def on_input_submitted(self, message: Input.Submitted) -> None:
        """Zpracuje odesl√°n√≠ vstupu od u≈æivatele."""
        prompt = message.value
        if not prompt:
            return
    
        user_panel = Panel(f"{prompt}", title="U≈æivatel", border_style="green")
        self.tool_widget.write(user_panel)
        self.input_widget.clear()
    
        self.current_explanation = ""
        self.explanation_widget.update("")
    
        self.run_orchestrator_task(prompt)

    @work(exclusive=True)
    async def run_orchestrator_task(self, prompt: str):
        """Spust√≠ `orchestrator.run` v samostatn√©m workeru, aby neblokoval UI."""
        await self.orchestrator.run(prompt, session_id=self.session_id)
        if self.session_id is None and hasattr(self.orchestrator, 'session_id'):
             self.session_id = self.orchestrator.session_id
    
    def on_log_message(self, message: LogMessage) -> None:
        """Zpracuje logovac√≠ zpr√°vu a zobraz√≠ ji v z√°lo≈æce Logy."""
        self.log_widget.add_log(message.text, message.level)

    def on_chat_message(self, message: ChatMessage) -> None:
        """Zpracuje zpr√°vu pro agenta a zobraz√≠ ji ve spr√°vn√©m widgetu."""
        msg_type = message.msg_type
        content = message.content

        if msg_type == "explanation_chunk":
            self.current_explanation += content
            md_panel = Panel(Markdown(self.current_explanation), border_style="blue", title="My≈°lenkov√Ω pochod")
            self.explanation_widget.update(md_panel)
            self.query_one("#explanation-container", VerticalScroll).scroll_end(animate=False)
        elif msg_type == "explanation_end":
            self.query_one("#explanation-container", VerticalScroll).scroll_end(animate=True)
            pass
        elif msg_type == "tool_code":
            panel_content = Syntax(content, "json", theme="monokai", line_numbers=True)
            title = "Vol√°n√≠ n√°stroje"
            self.tool_widget.write(Panel(panel_content, title=title, border_style="yellow"))
        elif msg_type == "tool_output":
            panel_content = content
            title = "V√Ωstup n√°stroje"
            self.tool_widget.write(Panel(panel_content, title=title, border_style="cyan"))
        elif msg_type == "task_complete":
            panel_content = content
            title = "√ökol Dokonƒçen"
            self.tool_widget.write(Panel(panel_content, title=title, border_style="bold green"))
        else: 
            self.log_widget.add_log(f"Nezn√°m√Ω typ zpr√°vy '{msg_type}': {content}", "WARNING")
    
    async def action_request_quit(self):
        """Bezpeƒçnƒõ ukonƒç√≠ aplikaci."""
        RichPrinter.info("Zahajuji ukonƒçov√°n√≠...")
        await self.orchestrator.shutdown()
        self.exit()


if __name__ == "__main__":
    RichPrinter.configure_logging()
    
    try:
        app = SophiaTUI()
        app.run()
    except Exception as e:
        # Zajist√≠me, ≈æe adres√°≈ô pro logy existuje
        os.makedirs(os.path.dirname(CRASH_LOG_PATH), exist_ok=True)
        # Zap√≠≈°eme kompletn√≠ traceback do crash logu
        with open(CRASH_LOG_PATH, "w", encoding="utf-8") as f:
            f.write("--- APLIKACE TUI SPADLA S NEOƒåEK√ÅVANOU V√ùJIMKOU ---\n\n")
            traceback.print_exc(file=f)
        
        # Vytiskneme chybu i na standardn√≠ chybov√Ω v√Ωstup
        print(f"\n[FATAL] TUI application crashed. See {CRASH_LOG_PATH} for details.", file=sys.stderr)
        traceback.print_exc()
        
        # Ukonƒç√≠me s nenulov√Ωm k√≥dem, aby to Guardian detekoval
        sys.exit(1)