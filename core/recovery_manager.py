"""
Recovery Manager - Automatick√© obnoven√≠ po p√°du Nom√°da.

Tento modul detekuje nedokonƒçen√° sezen√≠ a pokou≈°√≠ se je obnovit
s pou≈æit√≠m inteligentn√≠ch recovery strategi√≠.

ARCHITEKTURA:
- Detekce crashed sessions (jak√Ωkoli stav != IDLE, COMPLETED)
- Recovery strategie pro ka≈æd√Ω stav
- Bezpeƒçn√© obnoven√≠ s validac√≠

POU≈ΩIT√ç:
    rm = RecoveryManager(project_root=".")
    
    # Najdi crashed sessions
    crashed = rm.find_crashed_sessions()
    
    # Obnov prvn√≠
    if crashed:
        sm = rm.recover_session(crashed[0])
        # sm je nyn√≠ obnoven√Ω StateManager, p≈ôipraven√Ω pokraƒçovat

RECOVERY STRATEGIE:
- PLANNING: Restart pl√°nov√°n√≠ od zaƒç√°tku
- EXECUTING_STEP: Zkus krok znovu nebo p≈ôejdi na reflexi
- AWAITING_TOOL: P≈ôedpokl√°dej selh√°n√≠ n√°stroje ‚Üí reflexe
- REFLECTION: Pokraƒçuj v reflexi (bezpeƒçn√Ω stav)
- ERROR: P≈ôejdi do reflexe k anal√Ωze chyby
"""

import os
from typing import Optional, List
from core.state_manager import StateManager, State
from core.rich_printer import RichPrinter


class RecoveryManager:
    """
    Spravuje obnovu po p√°du orchestr√°toru.
    
    BEZPEƒåNOSTN√ç POZN√ÅMKY:
    - Recovery NIKDY nesma≈æe session data
    - Pokud recovery sel≈æe, session z≈Øst√°v√° nedotƒçen√°
    - V≈°echny recovery akce jsou logov√°ny
    """
    
    def __init__(self, project_root: str = "."):
        """
        Inicializace RecoveryManager.
        
        Args:
            project_root: Ko≈ôenov√Ω adres√°≈ô projektu
        """
        self.project_root = project_root
        self.memory_dir = os.path.join(project_root, "memory")
    
    def find_crashed_sessions(self) -> List[str]:
        """
        Najde session soubory, kter√© nebyly dokonƒçeny.
        
        Crashed session = jak√Ωkoli stav kromƒõ IDLE nebo COMPLETED
        
        Returns:
            Seznam session_id, kter√© jsou v mid-flight
        """
        crashed = []
        
        # Zkontroluj zda memory adres√°≈ô existuje
        if not os.path.exists(self.memory_dir):
            return crashed
        
        # Projdi v≈°echny session soubory
        for filename in os.listdir(self.memory_dir):
            if filename.startswith("session_") and filename.endswith(".json"):
                # Extrahuj session_id z n√°zvu souboru
                # Form√°t: session_20251012_143022.json ‚Üí 20251012_143022
                session_id = filename.replace("session_", "").replace(".json", "")
                
                # Naƒçti state
                sm = StateManager(self.project_root, session_id)
                
                if sm.restore():
                    state = sm.get_state()
                    
                    # Jak√Ωkoli stav kromƒõ IDLE, COMPLETED je pova≈æov√°n za crashed
                    if state not in [State.IDLE, State.COMPLETED]:
                        crashed.append(session_id)
                        RichPrinter.warning(
                            f"üîß Nalezena crashed session: {session_id} "
                            f"(stav: {state.value})"
                        )
        
        return crashed
    
    def recover_session(self, session_id: str) -> Optional[StateManager]:
        """
        Pokus√≠ se obnovit spadnut√© sezen√≠.
        
        Args:
            session_id: ID sezen√≠ k obnoven√≠
        
        Returns:
            StateManager s obnoven√Ωm stavem, nebo None pokud recovery nelze
        """
        RichPrinter.info(f"üîß Zahajuji recovery session: {session_id}")
        
        # Naƒçti state manager
        sm = StateManager(self.project_root, session_id)
        
        if not sm.restore():
            RichPrinter.error(
                f"‚ùå Nelze obnovit session {session_id} - soubor nenalezen"
            )
            return None
        
        current_state = sm.get_state()
        
        # Zobraz info o crashed session
        RichPrinter.warning(f"   Posledn√≠ stav: {current_state.value}")
        RichPrinter.info(f"   Historie p≈ôechod≈Ø: {len(sm.state_history)}")
        
        # Zobraz posledn√≠ 3 p≈ôechody pro kontext
        recent_transitions = sm.get_transition_history(limit=3)
        if recent_transitions:
            RichPrinter.info("   Posledn√≠ p≈ôechody:")
            for t in recent_transitions:
                RichPrinter.info(
                    f"      {t['from']} ‚Üí {t['to']} ({t['reason']})"
                )
        
        # Strategie recovery podle stavu
        recovery_strategies = {
            State.PLANNING: self._recover_from_planning,
            State.EXECUTING_STEP: self._recover_from_executing,
            State.AWAITING_TOOL_RESULT: self._recover_from_awaiting_tool,
            State.REFLECTION: self._recover_from_reflection,
            State.ERROR: self._recover_from_error,
            State.RESPONDING: self._recover_from_responding,
        }
        
        strategy = recovery_strategies.get(current_state)
        if strategy:
            try:
                strategy(sm)
                RichPrinter.info(f"‚úÖ Recovery √∫spƒõ≈°n√Ω - stav: {sm.get_state().value}")
            except Exception as e:
                RichPrinter.error(f"‚ùå Recovery selhal: {e}")
                return None
        else:
            RichPrinter.warning(
                f"‚ö†Ô∏è  ≈Ω√°dn√° recovery strategie pro stav: {current_state.value}"
            )
        
        return sm
    
    def _recover_from_planning(self, sm: StateManager):
        """
        Recovery kdy≈æ spadl bƒõhem pl√°nov√°n√≠.
        
        Strategie: Restart pl√°nov√°n√≠ od zaƒç√°tku (pl√°n m≈Ø≈æe b√Ωt nekonzistentn√≠)
        """
        RichPrinter.info("‚ôªÔ∏è  Recovery strategie: Restart pl√°nov√°n√≠")
        
        # Sma≈æ ƒç√°steƒçn√Ω pl√°n (pokud existuje)
        sm.set_data("plan", None)
        
        # NELZE p≈ôej√≠t p≈ô√≠mo z PLANNING do IDLE (nen√≠ v VALID_TRANSITIONS)
        # M√≠sto toho p≈ôejdeme p≈ôes ERROR
        sm.current_state = State.ERROR  # Force set (recovery exception)
        sm.transition_to(State.IDLE, "Recovery: reset after planning crash")
        sm.transition_to(State.PLANNING, "Recovery: restarting planning")
    
    def _recover_from_executing(self, sm: StateManager):
        """
        Recovery kdy≈æ spadl bƒõhem prov√°dƒõn√≠ kroku.
        
        Strategie:
        1. Pokud byl ulo≈æen pending_tool_call ‚Üí zkus znovu
        2. Jinak ‚Üí p≈ôejdi na reflexi (nƒõco se pokazilo)
        """
        RichPrinter.info("‚ôªÔ∏è  Recovery strategie: Anal√Ωza executing step")
        
        # Zkontroluj zda byl ulo≈æen pending tool call
        pending_tool = sm.get_data("pending_tool_call")
        
        if pending_tool:
            RichPrinter.info(
                f"   Nalezen nedokonƒçen√Ω tool call: {pending_tool.get('tool_name', 'unknown')}"
            )
            # Orchestr√°tor se pokus√≠ krok opakovat
            # (pending_tool_call z≈Østane v state_data)
            RichPrinter.info("   ‚ÑπÔ∏è  Orchestr√°tor m≈Ø≈æe zkusit krok znovu")
        else:
            # ≈Ω√°dn√Ω pending tool call ‚Üí nƒõco se pokazilo p≈ôed vol√°n√≠m
            RichPrinter.warning("   ≈Ω√°dn√Ω pending tool call ‚Üí p≈ôech√°z√≠m na reflexi")
            
            # P≈ôejdi na AWAITING (validn√≠ transition) a pak na REFLECTION
            sm.transition_to(
                State.AWAITING_TOOL_RESULT,
                "Recovery: forcing awaiting state"
            )
            sm.transition_to(
                State.REFLECTION,
                "Recovery: analyzing execution crash"
            )
    
    def _recover_from_awaiting_tool(self, sm: StateManager):
        """
        Recovery kdy≈æ spadl p≈ôi ƒçek√°n√≠ na v√Ωsledek n√°stroje.
        
        Strategie: Tool pravdƒõpodobnƒõ selhal ‚Üí reflexe
        """
        RichPrinter.warning("‚ö†Ô∏è  Recovery strategie: Tool execution interrupted")
        
        # Ulo≈æ error message
        sm.set_data(
            "error_message",
            "Tool execution was interrupted (process crashed or timeout)"
        )
        
        # P≈ôejdi na reflexi
        sm.transition_to(
            State.REFLECTION,
            "Recovery: tool execution interrupted"
        )
    
    def _recover_from_reflection(self, sm: StateManager):
        """
        Recovery bƒõhem reflexe.
        
        Strategie: Reflexe je bezpeƒçn√° - m≈Ø≈æeme pokraƒçovat kde jsme skonƒçili
        """
        RichPrinter.info("‚ôªÔ∏è  Recovery strategie: Pokraƒçuj v reflexi")
        
        # Reflexe je idempotentn√≠ - nen√≠ t≈ôeba nic mƒõnit
        # Orchestr√°tor prostƒõ pokraƒçuje v reflexi
        pass
    
    def _recover_from_error(self, sm: StateManager):
        """
        Recovery z chybov√©ho stavu.
        
        Strategie: P≈ôejdi do reflexe k anal√Ωze chyby
        """
        RichPrinter.error("‚ùå Recovery strategie: Anal√Ωza error state")
        
        # Zjisti error message (pokud byl ulo≈æen)
        error_msg = sm.get_data("error_message", "Unknown error (crashed)")
        RichPrinter.error(f"   Error: {error_msg}")
        
        # P≈ôejdi na reflexi
        sm.transition_to(
            State.REFLECTION,
            "Recovery: analyzing error state"
        )
    
    def _recover_from_responding(self, sm: StateManager):
        """
        Recovery bƒõhem generov√°n√≠ odpovƒõdi.
        
        Strategie: Zkus vygenerovat odpovƒõƒè znovu
        """
        RichPrinter.info("‚ôªÔ∏è  Recovery strategie: Retry response generation")
        
        # Responding je relativnƒõ bezpeƒçn√Ω - m≈Ø≈æeme zkusit znovu
        # ≈Ω√°dn√° zmƒõna stavu nutn√°, orchestr√°tor prostƒõ znovu vygeneruje odpovƒõƒè
        pass
    
    def cleanup_old_sessions(self, max_age_days: int = 7):
        """
        Sma≈æe star√© session soubory.
        
        Args:
            max_age_days: Maxim√°ln√≠ st√°≈ô√≠ v dnech (default 7)
        
        BEZPEƒåNOST: Smaz√°ny jsou JEN dokonƒçen√© sessions (IDLE, COMPLETED)
        """
        import time
        from datetime import datetime, timedelta
        
        if not os.path.exists(self.memory_dir):
            return
        
        cutoff_date = datetime.now() - timedelta(days=max_age_days)
        deleted_count = 0
        
        for filename in os.listdir(self.memory_dir):
            if not filename.startswith("session_") or not filename.endswith(".json"):
                continue
            
            filepath = os.path.join(self.memory_dir, filename)
            
            # Zkontroluj st√°≈ô√≠ souboru
            file_mtime = os.path.getmtime(filepath)
            file_date = datetime.fromtimestamp(file_mtime)
            
            if file_date < cutoff_date:
                # Naƒçti session a zkontroluj ≈æe je dokonƒçen√°
                session_id = filename.replace("session_", "").replace(".json", "")
                sm = StateManager(self.project_root, session_id)
                
                if sm.restore():
                    if sm.get_state() in [State.IDLE, State.COMPLETED]:
                        os.remove(filepath)
                        deleted_count += 1
                        RichPrinter.info(
                            f"üóëÔ∏è  Smaz√°na star√° session: {session_id} "
                            f"(st√°≈ô√≠: {(datetime.now() - file_date).days} dn√≠)"
                        )
        
        if deleted_count > 0:
            RichPrinter.info(f"‚úÖ Cleanup: Smaz√°no {deleted_count} star√Ωch sessions")
    
    def get_recovery_statistics(self) -> dict:
        """
        Vr√°t√≠ statistiky o crashed sessions.
        
        Returns:
            {
                "total_sessions": int,
                "crashed_sessions": int,
                "states": {state: count}
            }
        """
        if not os.path.exists(self.memory_dir):
            return {
                "total_sessions": 0,
                "crashed_sessions": 0,
                "states": {}
            }
        
        total = 0
        crashed = 0
        state_counts = {}
        
        for filename in os.listdir(self.memory_dir):
            if filename.startswith("session_") and filename.endswith(".json"):
                total += 1
                session_id = filename.replace("session_", "").replace(".json", "")
                sm = StateManager(self.project_root, session_id)
                
                if sm.restore():
                    state = sm.get_state()
                    state_counts[state.value] = state_counts.get(state.value, 0) + 1
                    
                    if state not in [State.IDLE, State.COMPLETED]:
                        crashed += 1
        
        return {
            "total_sessions": total,
            "crashed_sessions": crashed,
            "states": state_counts
        }
